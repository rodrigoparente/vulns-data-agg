# python imports
import os
import sys
import json
import csv
from urllib.request import urlopen

# third-party imports
import cve_searchsploit as CS


def main(exploit_feed,
         exploit_db_csv,
         exploit_info_csv,
         exploit_mapped_json,
         update_db):

    print('Preparing output folder...')

    # create output folder if it doesnt exists
    dirs = os.path.split(exploit_db_csv)[0]
    if not os.path.exists(dirs):
        os.makedirs(dirs)

    # delete output file if it exists
    for file_path in [exploit_db_csv, exploit_info_csv, exploit_mapped_json]:
        if os.path.exists(file_path):
            os.remove(file_path)

    # update exploitdb database
    if update_db:
        CS.update_db()

    print('Downloading exploit file...')

    try:
        with urlopen(exploit_feed) as response:
            with open(exploit_db_csv, 'wb') as f:
                f.write(response.read())
    except Exception as e:
        print(f'Could not download the file: {e}')

    print('Parsing csv file...')

    exploits = list()

    try:
        with open(exploit_db_csv, 'r') as f:
            csv_reader = csv.reader(f, delimiter=',')

            for index, row in enumerate(csv_reader):
                exploit_entry = dict()

                # skipping table header
                if index == 0:
                    continue

                exploit_entry.setdefault('CVE-ID', CS.cve_from_edbid(int(row[0])))
                exploit_entry.setdefault('exploitName', row[2])
                exploit_entry.setdefault('exploitPublishedDate', row[3])
                exploit_entry.setdefault('exploitType', row[5])
                exploit_entry.setdefault('exploitPlataform', row[6])

                exploits.append(exploit_entry)
    except Exception as e:
        print(f'Could not load csv file: {e}')

    print('Mapping exploits by CVE...')

    map_exploits = dict()

    for exploit in exploits:

        exploit_info = {
            'exploitName': exploit['exploitName'],
            'exploitPublishedDate': exploit['exploitPublishedDate'],
            'exploitType': exploit['exploitType'],
            'exploitPlataform': exploit['exploitPlataform']
        }

        for cve in exploit['CVE-ID']:
            if cve not in map_exploits.keys():
                map_exploits.setdefault(cve, [exploit_info])
            else:
                map_exploits[cve].append(exploit_info)

    print('Writing to file...')

    with open(exploit_info_csv, 'w') as f:
        csv_writer = csv.writer(f)

        csv_writer.writerow(exploits[0].keys())

        for exploit in exploits:
            csv_writer.writerow(exploit.values())

    with open(exploit_mapped_json, 'w') as f:
        json.dump(map_exploits, f, indent=4)

    print('Done!')


if __name__ == '__main__':

    # flag that controls whether to
    # update the exploit base or not
    update = False
    if len(sys.argv) == 2:
        update = True

    main(exploit_feed='https://raw.githubusercontent.com/offensive-security/exploitdb/master/files_exploits.csv',  # noqa
         exploit_db_csv='datasets/exploit_db.csv',
         exploit_info_csv='datasets/exploit_info.csv',
         exploit_mapped_json='datasets/exploits_mapped_by_cve.json',
         update_db=update)
